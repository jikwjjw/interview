+ 动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。
-------------
+ 业务接口
```
public interface Shape {
    void draw();
}
```
+ 业务1
```
public class Rectangle implements Shape{
    @Override
    public void draw() {
        System.out.println("Shape: Rectangle...");
    }
}
```
+ 业务2
```
public class Circle implements Shape {
    @Override
    public void draw() {
        System.out.println("Shape: Circle...");
    }
}
```
+ 装饰器
```
public abstract class ShapeDecorator implements Shape {
    protected Shape decoratedShape;

    public ShapeDecorator(Shape decoratedShape) {
        this.decoratedShape = decoratedShape;
    }

    @Override
    public void draw() {
        decoratedShape.draw();
    }
}
```
+ 装饰方法
``` 
public class RedShapeDecorator extends ShapeDecorator {
    public RedShapeDecorator(Shape decoratedShape) {
        super(decoratedShape);
    }

    @Override
    public void draw() {
        decoratedShape.draw();
        setRedBorder(decoratedShape);
    }

    private void setRedBorder(Shape decoratedShape) {
        System.out.println("Border Color: Red");
    }
}

```
+ 测试方法
```
public class Main {
    public static void main(String[] args) {
//        Shape circle = new Circle();
        Shape redCircle = new RedShapeDecorator(new Circle());
        Shape redRectangle = new RedShapeDecorator(new Rectangle());
        System.out.println("Circle with normal border");
//        circle.draw();

        redCircle.draw();
        redRectangle.draw();

    }
}
```
